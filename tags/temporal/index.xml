<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Temporal on jackieli.dev</title><link>https://jackieli.dev/tags/temporal/</link><description>Recent content in Temporal on jackieli.dev</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 04 May 2022 21:11:24 +0100</lastBuildDate><atom:link href="https://jackieli.dev/tags/temporal/index.xml" rel="self" type="application/rss+xml"/><item><title>Temporal.io errGroup</title><link>https://jackieli.dev/posts/temporalio-errgroup/</link><pubDate>Wed, 04 May 2022 21:11:24 +0100</pubDate><guid>https://jackieli.dev/posts/temporalio-errgroup/</guid><description>Recently during develop a temporal workflow, I found I need an errGroup implementation - an easy way to synchronise the cancellation of all Temporal coroutines when one of them returned error. I adapted the x/sync/errgroup. Here is the code:
package main import ( &amp;#34;errors&amp;#34; &amp;#34;log&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; &amp;#34;go.temporal.io/sdk/testsuite&amp;#34; &amp;#34;go.temporal.io/sdk/workflow&amp;#34; ) func Workflow(ctx workflow.Context) (string, error) { g, cc := withErrGroup(ctx) for i := 0; i &amp;lt; 3; i++ { g.</description></item></channel></rss>