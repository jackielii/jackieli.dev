<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on jackieli.dev</title><link>https://jackieli.dev/categories/javascript/</link><description>Recent content in javascript on jackieli.dev</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 25 Jul 2020 23:29:55 +0100</lastBuildDate><atom:link href="https://jackieli.dev/categories/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Javascript Date</title><link>https://jackieli.dev/posts/javascript-date/</link><pubDate>Sat, 25 Jul 2020 23:29:55 +0100</pubDate><guid>https://jackieli.dev/posts/javascript-date/</guid><description>So I need a way to represent LocalDate that can be found in java.time package. Turns out it&amp;rsquo;s harder than it looks.
Take LocalDateTime for example: LocalDateTime is a relative date that&amp;rsquo;s the same no matter which time zone you&amp;rsquo;re in. The easiest thing is to just use string: 2020-07-25T01:02:03. Note that there is no zone/offset information in the string
But if you want to use a Date object in javascript to represent it, it gets very tricky.</description></item><item><title>BigInt to Uint8Array</title><link>https://jackieli.dev/posts/bigint-to-uint8array/</link><pubDate>Thu, 23 Jul 2020 01:05:39 +0100</pubDate><guid>https://jackieli.dev/posts/bigint-to-uint8array/</guid><description>The problem came when I wanted to pass down BigDecimal&amp;rsquo;s unscaledBytes from kotlin/java to javascript through gRPC-Web.
Java&amp;rsquo;s implementation of the unscaledBytes returns signed big-endian bytes
Javascript has BigInt support, but lacks of toBytes(), stuff around the internet all seems to handle positive numbers just fine, but fails in negative number implementation
I borrowed from a Go implementation and adapted to javascript
Javascript implementation (using Typescript) const TWO_POWER_31 = 2147483648 const big0 = BigInt(0) const big1 = BigInt(1) const big8 = BigInt(8) export class BigDecimal { private big?</description></item></channel></rss>